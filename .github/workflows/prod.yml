name: deploy peivate-server-prod

on:
  workflow_dispatch:

jobs:
  build:
    if: github.actor == 'shehab-emad98' || github.actor == 'ahmadgamal99'
    runs-on: ubuntu-latest

    steps:

    - name: Restrict to allowed users
      run: |
        if [[ "${GITHUB_TRIGGERING_ACTOR}" != "shehab-emad98" && "${GITHUB_TRIGGERING_ACTOR}" != "ahmadgamal99" ]]; then
          echo "❌ User $GITHUB_TRIGGERING_ACTOR is not allowed to run or rerun this workflow."
          exit 1
        fi
        
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID2 }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY2 }}
        aws-region: eu-north-1

    - name: Set timestamp for tag
      run: echo "IMAGE_TAG=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Clone private rox-custody_common-modules
      env:
        GH_TOKEN: ${{ secrets.ROX_CUSTODY_COMMON_MODULES_TOKENS }}
      run: |
        git clone https://$GH_TOKEN@github.com/Dafa-Co/rox-custody_common-modules.git rox-custody_common-modules
        cd rox-custody_common-modules
        git checkout prod
        cd ..

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: custody-private-server
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to server and update the deployment
      uses: appleboy/ssh-action@v1.0.0
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: custody-private-server
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      with:
        host: 49.13.230.22
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY_3 }}
        envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
        script: |
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 780202038201.dkr.ecr.eu-north-1.amazonaws.com
          kubectl set image deployment/custody-private-server custody-private-server=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --record
